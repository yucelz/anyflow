{
	"info": {
		"_postman_id": "license-controller-api",
		"name": "n8n License Controller API",
		"description": "Complete API collection for n8n License Controller with Bearer Token authentication support. Updated for consolidated license controller with OwnerAccessControlService integration.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "license-api-collection"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract and store authentication token for Bearer Token usage",
									"if (pm.response.code === 200) {",
									"    // Method 1: Try to get cookie from response cookies",
									"    const responseCookies = pm.cookies.toObject();",
									"    if (responseCookies['n8n-auth']) {",
									"        pm.collectionVariables.set('auth_token', responseCookies['n8n-auth']);",
									"        console.log('Authentication token stored successfully from cookies');",
									"    } else {",
									"        // Method 2: Parse Set-Cookie header manually",
									"        const setCookieHeader = pm.response.headers.get('Set-Cookie');",
									"        console.log('Set-Cookie header:', setCookieHeader);",
									"        ",
									"        if (setCookieHeader) {",
									"            // Handle multiple cookies in Set-Cookie header",
									"            const cookies = Array.isArray(setCookieHeader) ? setCookieHeader : [setCookieHeader];",
									"            ",
									"            for (const cookie of cookies) {",
									"                if (cookie.includes('n8n-auth=')) {",
									"                    // Extract token value between n8n-auth= and first semicolon",
									"                    const match = cookie.match(/n8n-auth=([^;]+)/);",
									"                    if (match && match[1]) {",
									"                        pm.collectionVariables.set('auth_token', match[1]);",
									"                        console.log('Authentication token stored successfully from header');",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"    ",
									"    // Verify token was stored",
									"    const storedToken = pm.collectionVariables.get('auth_token');",
									"    if (!storedToken) {",
									"        console.log('Warning: No authentication token found in response');",
									"        console.log('Response headers:', pm.response.headers.toObject());",
									"    } else {",
									"        console.log('Token stored (first 20 chars):', storedToken.substring(0, 20) + '...');",
									"    }",
									"    ",
									"    // Store user information if available",
									"    try {",
									"        const responseJson = pm.response.json();",
									"        if (responseJson && responseJson.id) {",
									"            pm.collectionVariables.set('user_id', responseJson.id);",
									"            pm.collectionVariables.set('user_email', responseJson.email);",
									"            pm.collectionVariables.set('user_role', responseJson.role ? responseJson.role.slug || responseJson.role : 'unknown');",
									"            console.log('User info stored:', responseJson.email, responseJson.role);",
									"        }",
									"    } catch (e) {",
									"        console.log('No JSON response body or error parsing:', e.message);",
									"    }",
									"} else {",
									"    console.log('Login failed with status:', pm.response.code);",
									"    try {",
									"        const errorResponse = pm.response.json();",
									"        console.log('Error details:', errorResponse);",
									"    } catch (e) {",
									"        console.log('Error response body:', pm.response.text());",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/rest/login",
							"host": ["{{base_url}}"],
							"path": ["rest", "login"]
						},
						"description": "Authenticate user and obtain JWT token via cookie for Bearer Token usage"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify authentication is working",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/login",
							"host": ["{{base_url}}"],
							"path": ["rest", "login"]
						},
						"description": "Verify authentication status and get current user information"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/logout",
							"host": ["{{base_url}}"],
							"path": ["rest", "logout"]
						},
						"description": "Logout and invalidate authentication token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for obtaining and managing JWT tokens"
		},
		{
			"name": "License Management",
			"item": [
				{
					"name": "Get License Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('License data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", ""]
						},
						"description": "Retrieve current license information and status"
					},
					"response": []
				},
				{
					"name": "Get Available Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Plans data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/plans",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "plans"]
						},
						"description": "Get available license plans with pricing and features"
					},
					"response": []
				},
				{
					"name": "Get Debug Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Debug plans data is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('success');",
									"    if (responseJson.success) {",
									"        pm.expect(responseJson).to.have.property('plansCount');",
									"        pm.expect(responseJson).to.have.property('plans');",
									"        pm.expect(responseJson.plans).to.be.an('array');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/debug/plans",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "debug", "plans"]
						},
						"description": "Get debug information about available plans with simplified data structure"
					},
					"response": []
				},
				{
					"name": "Validate License Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validation result is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licenseKey\": \"{{test_license_key}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/rest/license/validate",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "validate"]
						},
						"description": "Validate a license key and return validation status"
					},
					"response": []
				},
				{
					"name": "Get License Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('License info is returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/info/{{test_license_key}}",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "info", "{{test_license_key}}"]
						},
						"description": "Get detailed information about a specific license key"
					},
					"response": []
				}
			],
			"description": "Basic license information and validation endpoints"
		},
		{
			"name": "License Operations (Requires license:manage scope + OwnerAccessControl)",
			"item": [
				{
					"name": "Activate License",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('License data and management token returned', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('managementToken');",
									"    });",
									"} else {",
									"    pm.test('Access control validation failed', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        console.log('Access denied - requires canCreateLicenses permission');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activationKey\": \"{{activation_key}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/rest/license/activate",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "activate"]
						},
						"description": "Activate a license using the provided activation key. Requires license:manage scope and canCreateLicenses permission via OwnerAccessControlService."
					},
					"response": []
				},
				{
					"name": "Renew License",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Updated license data returned', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('managementToken');",
									"    });",
									"} else {",
									"    pm.test('Access control validation failed', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        console.log('Access denied - requires canCreateLicenses permission');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/renew",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "renew"]
						},
						"description": "Renew the current active license. Requires license:manage scope and canCreateLicenses permission via OwnerAccessControlService."
					},
					"response": []
				},
				{
					"name": "Request Enterprise Trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Success response', function () {",
									"        // Success case - no specific response body expected",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Error response has message', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        console.log('Access denied or trial request failed');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/enterprise/request_trial",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "enterprise", "request_trial"]
						},
						"description": "Request an enterprise trial license. Requires license:manage scope and canCreateLicenses permission via OwnerAccessControlService."
					},
					"response": []
				},
				{
					"name": "Request Enterprise Trial (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Success message returned', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('success', true);",
									"        pm.expect(responseJson).to.have.property('message');",
									"    });",
									"} else {",
									"    pm.test('Access control validation failed', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        console.log('Access denied - requires canCreateLicenses permission');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/enterprise-trial",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "enterprise-trial"]
						},
						"description": "Request enterprise trial through local license API. Requires license:manage scope and canCreateLicenses permission via OwnerAccessControlService."
					},
					"response": []
				},
				{
					"name": "Generate Enterprise Owner License",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('License generated successfully', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('success', true);",
									"        pm.expect(responseJson).to.have.property('licenseKey');",
									"        pm.expect(responseJson).to.have.property('owner', 'global:owner');",
									"        pm.expect(responseJson).to.have.property('user');",
									"        ",
									"        // Store the generated license key for other tests",
									"        pm.collectionVariables.set('generated_license_key', responseJson.licenseKey);",
									"    });",
									"} else {",
									"    pm.test('Access control validation failed', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        console.log('Access denied - requires canCreateLicenses permission and global:owner role');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rest/license/generate-enterprise-owner",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "generate-enterprise-owner"]
						},
						"description": "Generate an enterprise license for the global owner. Requires license:manage scope and canCreateLicenses permission via OwnerAccessControlService. Enhanced with better error handling and user information in response."
					},
					"response": []
				}
			],
			"description": "License operations that require license:manage authorization scope and OwnerAccessControlService validation with canCreateLicenses permission"
		},
		{
			"name": "Community Edition",
			"item": [
				{
					"name": "Register Community Edition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Registration confirmation returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/rest/license/enterprise/community-registered",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "enterprise", "community-registered"]
						},
						"description": "Register the community edition with user and instance details"
					},
					"response": []
				},
				{
					"name": "Register Community Edition (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Registration confirmation returned', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/rest/license/community-registered",
							"host": ["{{base_url}}"],
							"path": ["rest", "license", "community-registered"]
						},
						"description": "Register community edition through local license API service"
					},
					"response": []
				}
			],
			"description": "Community edition registration endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to ensure authentication token is available",
					"const authToken = pm.collectionVariables.get('auth_token');",
					"if (!authToken && pm.info.requestName !== 'Login') {",
					"    console.log('Warning: No authentication token found. Please run the Login request first.');",
					"}",
					"",
					"// Log current user role for access control debugging",
					"const userRole = pm.collectionVariables.get('user_role');",
					"if (userRole && pm.info.requestName.includes('Enterprise') || pm.info.requestName.includes('License')) {",
					"    console.log('Current user role:', userRole);",
					"    if (userRole !== 'global:owner') {",
					"        console.log('Note: Some operations may require global:owner role and canCreateLicenses permission');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for common validations",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Handle authentication errors",
					"if (pm.response.code === 401) {",
					"    pm.test('Authentication required', function () {",
					"        console.log('Authentication failed. Please check your credentials and login again.');",
					"        pm.response.to.have.status(401);",
					"    });",
					"}",
					"",
					"// Handle authorization errors",
					"if (pm.response.code === 403) {",
					"    pm.test('Authorization failed', function () {",
					"        console.log('Insufficient permissions for this operation.');",
					"        pm.response.to.have.status(403);",
					"    });",
					"}",
					"",
					"// Handle OwnerAccessControlService validation errors",
					"if (pm.response.code === 400) {",
					"    try {",
					"        const responseJson = pm.response.json();",
					"        if (responseJson.message && responseJson.message.includes('global owner')) {",
					"            console.log('OwnerAccessControlService validation failed - requires global:owner role and canCreateLicenses permission');",
					"        }",
					"    } catch (e) {",
					"        // Ignore JSON parsing errors",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5678",
			"description": "Base URL for the n8n API (adjust port as needed)"
		},
		{
			"key": "user_email",
			"value": "admin@example.com",
			"description": "Email address for authentication"
		},
		{
			"key": "user_password",
			"value": "password123",
			"description": "Password for authentication"
		},
		{
			"key": "auth_token",
			"value": "",
			"description": "JWT authentication token (automatically set after login and used as Bearer Token)"
		},
		{
			"key": "user_id",
			"value": "",
			"description": "Current user ID (automatically set after login)"
		},
		{
			"key": "user_role",
			"value": "",
			"description": "Current user role (automatically set after login)"
		},
		{
			"key": "test_license_key",
			"value": "TEST-LICENSE-KEY-123",
			"description": "Sample license key for testing validation endpoints"
		},
		{
			"key": "activation_key",
			"value": "ACTIVATION-KEY-123",
			"description": "License activation key for testing activation endpoint"
		},
		{
			"key": "generated_license_key",
			"value": "",
			"description": "License key generated by enterprise owner endpoint (automatically set)"
		}
	]
}
