name: "Google Artifact Registry: Build and Push"

on:
  workflow_dispatch:
    inputs:
      n8n_version:
        description: "N8N version to build"
        required: false
        type: string
        default: "latest"
  push:
    branches:
      - pre-prod
  pull_request:
    branches:
      - pre-prod

env:
  NODE_OPTIONS: "--max-old-space-size=7168"
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  GAR_REPOSITORY: ${{ secrets.GAR_REPOSITORY }}

jobs:
  build-and-push:
    name: Build and Push to Google Artifact Registry
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Docker Image
        id: build
        run: |
          # Use the build structure: "build:docker": "node scripts/build-n8n.mjs && node scripts/dockerize-n8n.mjs"
          echo "Building n8n application..."
          node scripts/build-n8n.mjs

          echo "Building Docker image..."
          export IMAGE_TAG="${{ inputs.n8n_version || 'latest' }}"
          export IMAGE_BASE_NAME="n8nio/n8n"
          node scripts/dockerize-n8n.mjs

          # Output the built image details
          echo "image_tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          echo "image_digest=$(docker images --digests ${IMAGE_BASE_NAME}:${IMAGE_TAG} --format '{{.Digest}}')" >> "$GITHUB_OUTPUT"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@f0990588f1e5b5af6827153b93673613abdc6ec7 # v2.1.1

      - name: Authenticate with Google Cloud using Service Account Key
        run: |
          # Create temporary service account key file
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-sa-key.json

          # Activate service account
          gcloud auth activate-service-account --key-file=/tmp/gcp-sa-key.json

          # Set the project
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

          # Configure Docker for Artifact Registry
          gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev --quiet

          # Clean up the key file
          rm /tmp/gcp-sa-key.json

      - name: Tag and Push to Google Artifact Registry
        run: |
          # Get the built image details
          IMAGE_TAG="${{ inputs.n8n_version || 'latest' }}"
          LOCAL_IMAGE="n8nio/n8n:${IMAGE_TAG}"
          GAR_IMAGE="${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/n8n:${IMAGE_TAG}"
          GAR_LATEST="${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/n8n:latest"

          echo "Tagging local image for Google Artifact Registry..."
          docker tag $LOCAL_IMAGE $GAR_IMAGE
          docker tag $LOCAL_IMAGE $GAR_LATEST

          echo "Pushing to Google Artifact Registry..."
          docker push $GAR_IMAGE
          docker push $GAR_LATEST

          echo "=== Upload Complete ==="
          echo "Image pushed to: $GAR_IMAGE"
          echo "Latest tag: $GAR_LATEST"
